from sqlalchemy.orm import sessionmaker
from cockroachdb.sqlalchemy import run_transaction
import random
import schema
from .schema import Base
from sqlalchemy import create_engine
import datetime



class Service():

    def __init__(self):
        self.engine = create_engine(
                                    'cockroachdb://super@localhost:26257/what2eat',
                                    connect_args={'sslmode': 'disable'},
                                    echo=True                   # Log SQL queries to stdout
                                )

        Base.metadata.create_all(self.engine)
        self.sess = sessionmaker(bind=self.engine)

    def createEvent(self, eventName, eventDateTime, location):
        UID = random.getrandbits(128)
        run_transaction(self.sess, lambda s: self._createEvent(UID, eventName, eventDateTime, location))
        return UID

    # Creates an event
    def _createEvent(self, uid, eventName, eventDateTime, location):
        self.sess.add(schema.Event(uid=uid, name=eventName, location=location))
        self.sess.add(schema.TimeOption(event_id=uid, timestamp=eventDateTime))

    def getEvent(self, eventName):
        return self.sess.execute("SELECT * FROM events")

serviceObj = Service()
print(serviceObj.createEvent("CalHacks5", datetime.datetime.now().time(), "Berkeley"))
print(serviceObj.createEvent("CalHacks6", datetime.datetime.now().time(), "Berkeley"))
print(serviceObj.getEvent())
#
#     def login(self, username, eventID, creator):
#         # Check if user exists
#         uid = self.sess.execute("SELECT UID FROM users WHERE name=:name AND eventUID:=eventUID",
#                               {"name": username, "eventUID": eventID})
#         print(uid)
#         # This could be a result != null. Idk what result looks like
#         if len(uid) == 0:
#             #User doesn't exist, so we add the user to database
#             run_transaction(self.sess, lambda s: self._login(username, eventID, creator))
#             uid = self.sess.execute("SELECT UID FROM users WHERE name=:name", {"name": username})
#
#         return uid
#
#
#     def _login(self, username, eventID, creator):
#         self.sess.add(schema.User(name=username, eventUID=eventID, creator=creator))
#         # Get the autogenerated UID
#         result = self.sess.execute("SELECT UID FROM users WHERE name=:name", {"name": username})
#         return result
#
#     def addRestaurant(self, eventID, yelpID):
#         exists = self.sess.execute("SELECT yelpID FROM users WHERE yelpID=:yelpID and eventID=:eventID",
#                                    {"yelpID": yelpID, "eventID": eventID})
#         if len(exists) == 0:
#             run_transaction(self.sess, lambda s: self._addRestaurant(username, eventID, creator))
#
#
# .
#
#     def _addRestaurant(self, eventID, yelpID):
#         self.sess.add(schema.RestaurantOption(event_id=eventID, yelpID=yelpID))
#
#     def voteRestaurant(self, userID, yelpID)
#         restaurants = self.sess.query(schema.RestaurantVote).filter(schema.RestaurantVote.id==userID)
#         self.sess.expungeAll(restaurants)
#         self.sess.add(schema.RestaurantVote())
#
#
#
#         sess.execute("DELETE FROM restaurant_votes WHERE user_ID=:UserID", {"UserID":userID})
#         sess.execute("SELECT id FROM restaurant_options WHERE yelp_id=:name AND eventUID:=eventUID")
#
#
#
# #Delete all exisiting votes, then add vote to restaurant_votes
# def voteRestaurant(sess, userID, yelpID):
#     sess.execute("DELETE FROM restaurant_votes WHERE user_ID=:UserID", {"UserID":userID})
#     sess.execute("SELECT id FROM restaurant_options WHERE yelp_id=:name AND eventUID:=eventUID")
#     sess.add(RestaurantVote(user_ID=userID, restaurantID=restaurantID))
#
# #
# def addRestaurant(sess, eventID, yelpID):
#     self.sess.add(RestaurantOption(event_id=eventID, yelpID=yelpID))
